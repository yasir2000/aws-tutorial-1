service: crud-microservices
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    PRODUCTS_TABLE: ${self:service}-products-${sls:stage}
    USERS_TABLE: ${self:service}-users-${sls:stage}
    ORDERS_TABLE: ${self:service}-orders-${sls:stage}
    SNS_TOPIC: ${self:service}-events-${sls:stage}
    SQS_QUEUE: ${self:service}-notifications-${sls:stage}
    IS_OFFLINE: ${env:IS_OFFLINE, 'true'}
    NODE_ENV: development
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    JWT_SECRET: ${env:JWT_SECRET, 'local-development-secret'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan 
        - dynamodb:put
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sns:Publish
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource: "*"
functions:
  # Authentication functions
  signup:
    handler: handlers/auth.signup
    events:
      - http:
          path: auth/signup
          method: post
          cors: true
  signin:
    handler: handlers/auth.signin
    events:
      - http:
          path: auth/signin
          method: post
          cors: true
  confirmSignup:
    handler: handlers/auth.confirmSignup
    events:
      - http:
          path: auth/confirm
          method: post
          cors: true
  getProfile:
    handler: handlers/auth.getProfile
    events:
      - http:
          path: auth/profile
          method: get
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  # User Management
  createUser:
    handler: handlers/users.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  getUser:
    handler: handlers/users.get
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  updateUser:
    handler: handlers/users.update
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  deleteUser:
    handler: handlers/users.delete
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  # Product Management
  createProduct:
    handler: handlers/products.create
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  getProducts:
    handler: handlers/products.getAll
    events:
      - http:
          path: products
          method: get
          cors: true
  getProduct:
    handler: handlers/products.get
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  updateProduct:
    handler: handlers/products.update
    events:
      - http:
          path: products/{id}
          method: put
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  deleteProduct:
    handler: handlers/products.delete
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  # Order Management
  createOrder:
    handler: handlers/orders.create
    events:
      - http:
          path: orders
          method: post
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
  getOrders:
    handler: handlers/orders.getAll
    events:
      - http:
          path: orders
          method: get
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
# Event Processors
  processNotification:
    handler: handlers/notifications.process
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.SQS_QUEUE}
resources:
  Resources:
    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
          - Name: name
            AttributeDataType: String
            Required: true
        
    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        AccessTokenValidity: 24
        IdTokenValidity: 24
        RefreshTokenValidity: 30

    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-products-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ORDERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    # SNS Topic
    EventsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.environment.SNS_TOPIC}
    # SQS Queue
    NotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}

  Outputs:
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolId
    
    CognitoUserPoolClientId:
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolClientId
    
    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn
      Export:
        Name: ${self:service}-${sls:stage}-UserPoolArn
custom:
  isProduction: ${opt:stage, 'dev'}
  enableAuth: ${self:custom.isProduction, 'false'}

plugins:
  - serverless-offline
